  DentistDemo.MyForm.resources - Embedded, ContainedInManifestFile, 
ImageRuntimeVersion: v4.0.30319
Assembly DentistDemo, Version=0.0.*, Culture=不因語言而異 (不因國別而異): 
	hash=SHA1, flags=PublicKey
Assembly mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089: 
	hash=None, flags=None
Assembly DevComponents.DotNetBar2, Version=12.7.0.2, Culture=neutral, PublicKeyToken=c39c3242a43eee2b: 
	hash=None, flags=None
Assembly dllBLE, Version=1.0.*, Culture=不因語言而異 (不因國別而異): 
	hash=None, flags=None
Assembly HKOGLPanel, Version=1.0.*, Culture=不因語言而異 (不因國別而異): 
	hash=None, flags=None
Assembly System.Data, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089: 
	hash=None, flags=None
Assembly System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a: 
	hash=None, flags=None
Assembly System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089: 
	hash=None, flags=None
Assembly System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a: 
	hash=None, flags=None
Assembly System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089: 
	hash=None, flags=None
Assembly System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089: 
	hash=None, flags=None
Struct DevUtils: AutoLayout, AnsiClass, Class, Public, SequentialLayout, Sealed, BeforeFieldInit
  :System.ValueType
Class DentistDemo.MyForm: AutoLayout, AnsiClass, Class, Public, BeforeFieldInit
  :System.Windows.Forms.Form
    Void .ctor(): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
  Fields:
    Int32 ErrorString_len_in : Public
    Int32 ErrorString_len_out : Public
    Int32 fftnumber : Public
    Int32 deviceID : Public
    Int32 OutArrLenIn : Public
    Int32 OutArrLenOut : Public
    TRcuda* theTRcuda : Public
    Boolean mouse_move : Public
    Single thePointSize : Public
    Int32 volumeDataIdx : Public
    Int32 PointCloud_idx_now : Public
    Int32 PointCloud_idx_show : Public
    Int32 readRaw_count : Public
    Int32 Point_cloud_idx_sec : Public
    Int32 volumeZ_now : Public
    Int32 Min_quat_idx : Public
    Int32 scan_count : Public
    Boolean showVolumeData : Public
    Boolean showPointType : Public
    Boolean showBoardTemp : Public
    Boolean showPointCloud : Public
    Boolean can_rotate : Public
    Boolean Initial_OK : Public
    Boolean show_first_point : Public
    Boolean show_second_point : Public
    Boolean enable_review : Public
    Boolean velocity_offset_enable : Public
    Boolean showoverlap1 : Public
    Boolean showoverlap2 : Public
    Boolean change_constant1 : Public
    Boolean change_constant2 : Public
    Boolean gyro_test : Public
    Boolean show_third_point : Public
    Boolean show_tmp_align1 : Public
    Boolean show_tmp_align2 : Public
    Boolean is_camera_move : Public
    Boolean show_aligned_cloud : Public
    Boolean is_reset : Public
    Boolean timer_rot : Public
    Boolean show_combine_cloud : Public
    Boolean is_before_camera : Public
    Boolean show_noGyro_PC : Public
    Boolean show_rawData : Public
    Int32 begin_time IsLong : Public
    Int32 end_time IsLong : Public
    std.vector<GlobalRegistration::Point3D\,std::allocator<GlobalRegistration::Point3D> >* tmp_over_aligned1 : Public
    std.vector<GlobalRegistration::Point3D\,std::allocator<GlobalRegistration::Point3D> >* tmp_over_aligned2 : Public
    std.vector<file_name\,std::allocator<file_name> >* filename_array : Public
    Radian* theta_diff : Public
    Radian* output_diff : Public
    Vector3* rotationAxix_diff : Public
    Vector3* output_rotVec : Public
    Quaternion* quat1 : Public
    Quaternion* quat2 : Public
    Quaternion* quat3 : Public
    Quaternion* all_quat : Public
    Quaternion* quat_tmp : Public
    Quaternion* camera_quat : Public
    Quaternion* all_quat1 : Public
    Quaternion* preQuaternL : Public
    Matrix3* tmp_rotMatrix : Public
    glm.detail.tmat4x4<float>* tmp_MM : Public
    glm.detail.tmat4x4<float>* reset_M : Public
    glm.detail.tmat4x4<float>* mani_MM : Public
    glm.detail.tmat4x4<float>* LocalTransform_M : Public
    Single* float_rotate_M : Public
    Vector3* tmp_center : Public
    Vector3* pre_acc : Public
    Vector3* now_acc : Public
    Vector3* draw_plane1 : Public
    Vector3* draw_plane2 : Public
    Vector3* draw_plane3 : Public
    Vector3* draw_plane4 : Public
    Vector3* combine_max : Public
    Vector3* combine_min : Public
    Single max_x : Public
    Single max_y : Public
    Single max_z : Public
    Single min_x : Public
    Single min_y : Public
    Single min_z : Public
    Single tmp_peak_gap : Public
    Single tmp_energy_gap : Public
    Single frame_rate : Public
    Double tmp_theshold : Public
    Double super_theshold : Public
    Double tmp_max_time : Public
    Double super_max_time : Public
    Double tmp_max_angle : Public
    Double super_max_angle : Public
    Double tmp_sample_point : Public
    Double super_sample_point : Public
    Double tmp_overlap : Public
    Double super_overlap : Public
    Double tmp_delta : Public
    Double super_delta : Public
    Double tmp_transform : Public
    Double super_transform : Public
    Double tmp_constant1 : Public
    Double tmp_constant2 : Public
    Double super_constant1 : Public
    Double super_constant2 : Public
    Double tmp_aligned1_max : Public
    Double tmp_aligned1_min : Public
    Double tmp_aligned2_max : Public
    Double tmp_aligned2_min : Public
    Double tmp_iterThre : Public
    Double super_iterTre : Public
    Double point_z_124 : Public
    Double point_z_125 : Public
    Single timer_1 : Public
    Single timer_2 : Public
    Single timer_3 : Public
    Int32 first_t IsLong : Public
    Int32 second_t IsLong : Public
    Single final_score : Public
    std.vector<Vector3\,std::allocator<Vector3> >* Plane_vector : Public
    std.vector<Vector3\,std::allocator<Vector3> >* input_rotVec : Public
    std.vector<std::vector<int\,std::allocator<int> >\,std::allocator<std::vector<int\,std::allocator<int> > > >* overlap_idx1 : Public
    std.vector<std::vector<int\,std::allocator<int> >\,std::allocator<std::vector<int\,std::allocator<int> > > >* overlap_idx2 : Public
    std.vector<Eigen::Matrix<float\,4\,4\,0\,4\,4>\,std::allocator<Eigen::Matrix<float\,4\,4\,0\,4\,4> > >* translate_mat : Public
    std.vector<float\,std::allocator<float> >* input_dgree : Public
    Int32 file_idx : Public
    Int32 tmp_iterCount : Public
    Int32 super_iterCount : Public
    Int32 Aligned_target_id : Public
    Int32 show_Cloud_1ID : Public
    std.vector<PointCloudArray\,std::allocator<PointCloudArray> >* PointCloudArr : Public
    std.vector<PointData\,std::allocator<PointData> >* Combine_cloud_PC : Public
    std.basic_string<char\,std::char_traits<char>\,std::allocator<char> >* tmp_fileName : Public
    std.basic_string<char\,std::char_traits<char>\,std::allocator<char> >* out_fileName : Public
    Single full_scan_time : Public
    Single all_time : Public
    Single tmp_rotate_x : Public
    Single tmp_rotate_y : Public
    Single tmp_rotate_z : Public
    objData* obj1 : Public
    objData* obj2 : Public
    objData* obj3 : Public
    objData* obj4 : Public
    objData* obj5 : Public
